{"version":3,"file":"static/webpack/static/development/pages/contact.js.635d04faa4d5eb401bf6.hot-update.js","sources":["webpack:///./pages/contact.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\nimport Tilt from 'react-tilt';\nimport { Transition } from \"react-transition-group\"\nimport Layout from '../components/Layout';\nimport Fade from '../components/Fade';\nimport Loading from '../components/Loading';\nimport { YosemiteBackground, Container } from '../components/Backgrounds';\nimport {regexCheck, checkEmail, checkSpecial} from '../util/regexCheck';\nimport sendEmail from '../API/sendEmail';\n\ninterface Red {\n    isRed: boolean\n}\n\nconst Title = styled.p`\n    font-size: 1.2rem;\n    text-align: center;\n    padding: 0.5rem;\n    margin: 0;\n\n    color: white;\n`;\n\nconst ContactContainer = styled(Container)`\n    padding-top: 40px;\n`;\n\nconst FormContainer = styled.div`\n    max-width: 30em;\n    padding: 0 2rem 2rem 2rem;\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nconst PadTop = styled.div`\n    padding-top: 10px;\n`;\n\nconst Label = styled.label`\n    color: #EEE;\n    font-weight:600;\n    line-height:1.5;\n    font-size: 0.875rem;\n`;\n\nconst Input = styled.input<Red>`\n    width: 100%;\n    padding: 0.5rem;\n\n    -webkit-appearance:none;\n    -moz-appearance:none;\n\n    background-clip: padding-box;\n\n    border: 1px solid #999;\n    border-radius: 0.225rem;\n    \n\n    font-weight: bold;\n    font-size: 18px;\n\n    color: white;\n    background: ${props => props.isRed ? 'radial-gradient(circle, rgba(196,100,79,0.07326680672268904) 0%, rgba(215,27,27,0.7315301120448179) 100%)' : 'radial-gradient(circle, rgba(40,44,52,0.48783263305322133) 0%, rgba(0,224,255,0.196516106442577) 100%)'};\n`;\n\nconst TextArea = styled.textarea<Red>`\n    width: 100%;\n    padding: 0.5rem;\n\n    -webkit-appearance:none;\n    -moz-appearance:none;\n\n    background-clip: padding-box;\n\n    border: 1px solid #999;\n    border-radius: 0.225rem;\n\n    font-weight: bold;\n    font-size: 18px;\n\n    color: white;\n    \n    background: ${props => props.isRed ? 'radial-gradient(circle, rgba(196,100,79,0.07326680672268904) 0%, rgba(215,27,27,0.7315301120448179) 100%)' : 'radial-gradient(circle, rgba(40,44,52,0.48783263305322133) 0%, rgba(0,224,255,0.196516106442577) 100%)'};\n`;\n\nconst SendButton = styled.button`\n    color: white;\n\n    width: 70px;\n    height: 40px;\n\n    font-size: 14px;\n\n    background-clip: padding-box;\n    -webkit-appearance: none;\n\n    border: 1px solid #999;\n    border-radius: 0.225rem;\n\n    background: rgb(47,147,63);\n    background: radial-gradient(circle, rgba(47,147,63,0.48783263305322133) 0%, rgba(0,224,255,0.196516106442577) 100%);\n\n    -moz-osx-font-smoothing:grayscale;\n    backface-visibility:hidden;\n    transform:translateZ(0);\n    transition: all 0.25s ease-out;\n\n    cursor: pointer;\n\n    :hover,:focus{\n        transform:scale(1.05);\n        background: rgb(35,185,38);\n        background: radial-gradient(circle, rgba(35,185,38,0.6) 0%, rgba(0,224,255,0.6) 100%);\n    }\n\n    :active{\n       transform:scale(.90); \n    }\n`;\n\nconst A = styled.a`\n    text-decoration:none;\n    \n    cursor: pointer;\n\n    max-width: 50px;\n    max-height: 50px;\n\n    background-color: white;\n\n    display: flex;\n    justify-content: center;\n    align-items:center;\n\n    :hover {\n        box-shadow: 0 0 10px rgb(6, 72, 83);\n    }\n`;\n\nconst GitHubA = styled(A)`\n    border-radius: 100%;\n`;\n\nconst LinkedInA = styled(A)`\n    border-radius: 10%;\n`;\n\nconst Img = styled.img`\n    width: 105%;\n    height: auto;\n\n    -moz-osx-font-smoothing:grayscale;\n    backface-visibility:hidden;\n    transform:translateZ(0);\n    transition: transform 0.25s ease-out;\n\n    :hover,:focus{\n        transform:scale(1.05);\n    }\n\n    :active{\n       transform:scale(.90); \n    }\n`;\n\nconst SocialContainer = styled.div`\n    margin-top: 40px;\n`;\n\nconst FlexBetween = styled.div`\n    display: flex;\n    justify-content: space-around;\n    padding: 2rem;\n    max-width: 30em;\n\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nconst FlexCenter = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    height: 442px;\n`;\n\nconst TitleTilt = styled(Title)`\n    border-radius: 0.225rem;\n    background: radial-gradient(circle, rgba(47,147,63,0.48783263305322133) 0%, rgba(0,224,255,0.196516106442577) 100%);\n`;\n\nconst ErrorMesage = styled(Title)`\n\n    border-radius: 0.225rem;\n    background: rgba(215,27,27,0.7315301120448179);\n    max-width: 30em;\n\n    padding: 20px 20px;\n\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nconst Copy = styled.span`\n    text-decoration: underline;\n\n    cursor: pointer;\n`;\n\ninterface ContactProps {}\n\ninterface ContactState {\n    name : string\n    email : string\n    title : string\n    body : string\n    highlightRed : boolean[]\n    emailStatus: string\n}\n\nclass Contact extends React.Component<ContactProps,ContactState>{\n    constructor(props: ContactProps){\n        super(props);\n        this.state = {\n            name : '',\n            email : '',\n            title : '',\n            body : '',\n            highlightRed : new Array(4).fill(false),\n            emailStatus: 'writing',\n        }\n    }\n    \n    onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hlr = [...this.state.highlightRed];\n        if(regexCheck(event.target.value, 'plain')){\n            hlr[0] = false; \n        }\n        this.setState({ name : event.target.value, highlightRed : hlr})\n    }\n\n    onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hlr = [...this.state.highlightRed];\n        if(checkEmail(event.target.value)){\n            hlr[1] = false;\n        }\n        this.setState({ email : event.target.value, highlightRed : hlr})\n    }\n\n    onTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let hlr = [...this.state.highlightRed];\n        if(checkSpecial(event.target.value)){\n            hlr[2] = false;\n        }\n        this.setState({ title : event.target.value, highlightRed : hlr})\n    }\n\n    onBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        let hlr = [...this.state.highlightRed];\n        if(checkSpecial(event.target.value)){\n            hlr[3] = false;\n        }\n        this.setState({ body : event.target.value, highlightRed : hlr})\n    }\n    \n    onSend = async() => {\n        const {name,email,title,body, highlightRed} = this.state;\n        let hlr = [...highlightRed];\n        \n        if(!regexCheck(name, 'plain') || !name){\n            hlr[0] = true;\n        }\n        if(!checkEmail(email) || !email){\n            hlr[1] = true;\n        }\n        if(!regexCheck(title, 'special') || !title){\n            hlr[2] = true;\n        }\n        if(!regexCheck(body, 'special') || !body){\n            hlr[3] = true;\n        }\n        this.setState({ highlightRed : hlr })\n\n        // Only sends if input is valid\n        if(!hlr.includes(true)){\n            // set status to loading, then update status when we get result\n            this.setState({ emailStatus: 'loading' });\n\n            const success = await sendEmail({name, email, title, body});\n\n            if(success){\n                this.setState({ emailStatus: 'success' });\n            }\n            else{\n                this.setState({ emailStatus: 'failed' });\n            }    \n        }\n    }\n\n    copyToClipBoard = async(event: React.MouseEvent<HTMLSpanElement>) => {\n        if(!navigator.clipboard) {\n            // Clipboard API not available\n            return\n        }\n        const evt = event.target as HTMLSpanElement;\n\n        const text = evt.innerText;\n        try {\n            await navigator.clipboard.writeText(text)\n        } catch (err) {\n            //console.error('Failed to copy!', err)\n        }\n    }\n\n    render(){\n        const { highlightRed, emailStatus } = this.state;\n        return(\n            <Layout>\n                <YosemiteBackground>\n                    <Transition\n                        in={true}\n                        timeout={{\n                            appear: 150,\n                        }}\n                        appear={true}\n                    >\n                    {(state: string) => (\n                        <Fade state={state}>\n                            <ContactContainer>\n\n                                {/* Only Display if email has not been sent */}\n                                <Transition\n                                    in={emailStatus === 'writing'}\n                                    timeout={{\n                                        exit: 300\n                                    }}\n                                    unmountOnExit \n                                    mountOnEnter\n                                >\n                                {(state: string) => (\n                                    <Fade state={state}>\n                                        <Title>Send Me an Email</Title>\n                                        <FormContainer>                            \n                                            <Label>Name\n                                                <Input \n                                                    onChange={this.onNameChange} \n                                                    isRed={highlightRed[0]} \n                                                    type=\"text\" \n                                                />\n                                            </Label>  \n                                            <PadTop>                        \n                                                <Label >Email\n                                                    <Input \n                                                        onChange={this.onEmailChange} \n                                                        isRed={highlightRed[1]} \n                                                        type=\"email\" \n                                                    />\n                                                </Label> \n                                            </PadTop>  \n                                            <PadTop>                       \n                                                <Label>Subject\n                                                    <Input \n                                                        onChange={this.onTitleChange} \n                                                        isRed={highlightRed[2]} \n                                                        type=\"text\" \n                                                    />\n                                                </Label>\n                                            </PadTop> \n                                            <PadTop>\n                                                <Label >Message\n                                                    <TextArea \n                                                        onChange={this.onBodyChange} \n                                                        isRed={highlightRed[3]} \n                                                    />\n                                                </Label>\n                                            </PadTop>\n                                            <PadTop>\n                                                <SendButton onClick={this.onSend} >\n                                                    Send\n                                                </SendButton>    \n                                            </PadTop>\n                                        </FormContainer>  \n                                    </Fade>\n                                )}\n                                </Transition>\n\n                                {/* Only display if email is loading */}\n                                <Transition\n                                    in={emailStatus === 'loading'}\n                                    timeout={{\n                                        enter: 100,\n                                        exit: 350\n                                    }}\n                                    unmountOnExit \n                                    mountOnEnter\n                                >\n                                {(state: string) => (\n                                    <Fade state={state}>\n                                        <FlexCenter>\n                                            <Loading />\n                                        </FlexCenter>\n                                    </Fade>\n                                )}\n                                </Transition>\n\n                                {/* Only Display if email was successfully sent */}\n                                <Transition\n                                    in={emailStatus === 'success'}\n                                    timeout={{\n                                        enter: 350,\n                                    }}\n                                    unmountOnExit \n                                    mountOnEnter\n                                >\n                                {(state: string) => (\n                                    <Fade state={state}>\n                                        <FlexCenter>\n                                            <Tilt options={{ max : 55 , perspective: 75 }}>\n                                                <TitleTilt>\n                                                    Email Sent!    \n                                                </TitleTilt>\n                                            </Tilt>\n                                        </FlexCenter>\n                                    </Fade>\n                                )}\n                                </Transition>\n\n                                {/* Only display if unsuccessful */}\n                                <Transition\n                                    in={emailStatus === 'failed'}\n                                    timeout={{\n                                        enter: 350,\n                                        exit: 300\n                                    }}\n                                    unmountOnExit \n                                    mountOnEnter\n                                >\n                                {(state: string) => (\n                                    <Fade state={state}>\n                                        <FlexCenter>\n                                            <ErrorMesage>\n                                                Error sending email... you can reach me at  \n                                                <Copy onClick={this.copyToClipBoard}> spencerhemstreet@gmail.com</Copy>\n                                            </ErrorMesage>    \n                                        </FlexCenter>\n                                    </Fade>\n                                )}\n                                </Transition>\n\n                            </ContactContainer>\n                            <SocialContainer>\n                                    <Title>Reach Out To Me On GitHub or LinkedIn</Title>     \n                                    <FlexBetween>\n                                        <Tilt options={{ max : 55 , perspective: 75 }} >\n                                            <GitHubA  target='_blank' \n                                                rel=\"noopener noreferrer\" \n                                                href='https://github.com/sfhemstreet' \n                                            >\n                                                <Img  alt=\"github logo\" src='/images/GitHub.png'/> \n                                            </GitHubA> \n                                        </Tilt>\n                                        <Tilt options={{ max : 55, perspective: 75 }} >\n                                            <LinkedInA  target='_blank' \n                                                rel=\"noopener noreferrer\" \n                                                href='https://www.linkedin.com/in/spencer-hemstreet-094331177/' \n                                            >                                        \n                                                <Img alt=\"linked in logo\" src='/images/linkedIn.png'/> \n                                            </LinkedInA>\n                                        </Tilt>\n                                    </FlexBetween>    \n                                </SocialContainer>\n                        </Fade>\n                    )} \n                    </Transition>\n                </YosemiteBackground>        \n            </Layout>\n        )\n    }\n}\n\nexport default Contact;"],"mappings":"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","sourceRoot":""}